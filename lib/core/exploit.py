import os
import time
import glob
import importlib
import threading
import logging
import concurrent
from concurrent.futures import ThreadPoolExecutor, as_completed

from lib.core.data import vulnscan_paths
from lib.utils.csv_tools import csv_generate


class Exploit:
    def __init__(self, urls, pocs, threads):
        self.urls = urls
        self.pocs = pocs
        self.threads = threads
        self.result = []

    def call_check(self, script, url):
        check_func = getattr(script, 'check')
        result = check_func(url)
        # if result:
        #     if type(result) == str:
        #         self.result.append(result)
        #     else:
        #         self.result.extend(result)

    def run(self):
        scripts = []
        # 导入poc
        for poc in self.pocs:
            scripts_name = []
            path = os.path.join(
                vulnscan_paths['vulnscan_plugins_path'], poc, '*.py')
            scripts_path = glob.glob(path)
            for _ in scripts_path:
                script_name = os.path.basename(_).replace('.py', '')
                scripts_name.append(script_name)

        print(scripts_name)
        for _ in scripts_name:
            m = importlib.import_module(f'plugins.{poc}.{_}')
            scripts.append(m)
        print(scripts)

        for t in threading.enumerate():
            print(t)                
        # 线程池
        with ThreadPoolExecutor(max_workers=self.threads) as executor:
            vulns = {}
            for u in self.urls:
                for s in scripts:
                    vulns[executor.submit(self.call_check, s, u)] = (s,u)

            # for t in threading.enumerate():
            #     print(t)                
            print(vulns)

            for future in as_completed(vulns, timeout=3):
                s, u = vulns[future]
                try:
                    self.result.append(future.result())
                except Exception as e:
                    print(f'{u},{s} generated an exception: {e}' )
                    # # logging.exception(e)
                    # pass
            
        print(self.result)

