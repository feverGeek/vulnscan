import os
import time
import glob
import importlib
import threading
import logging
import concurrent
from concurrent.futures import ThreadPoolExecutor, as_completed

from lib.core.data import vulnscan_paths
from lib.utils.csv_tools import csv_generate
from lib.utils.output    import prt


class Exploit:
    def __init__(self, urls, pocs, threads):
        self.urls = urls
        self.pocs = pocs
        self.threads = threads
        self.results = []

    def call_check(self, script, url):
        check_func = getattr(script, 'check')
        return check_func(url)

    def run(self):
        scripts = []
        # 导入poc
        for poc in self.pocs:
            scripts_name = []
            path = os.path.join(
                vulnscan_paths['vulnscan_plugins_path'], poc, '*.py')
            scripts_path = glob.glob(path)
            for _ in scripts_path:
                script_name = os.path.basename(_).replace('.py', '')
                scripts_name.append(script_name)

        for _ in scripts_name:
            m = importlib.import_module(f'plugins.{poc}.{_}')
            scripts.append(m)

        prt('scripts', scripts)

        # 线程池
        with ThreadPoolExecutor(max_workers=self.threads) as executor:
            vulns = {}
            for u in self.urls:
                for s in scripts:
                    vulns[executor.submit(self.call_check, s, u)] = (s,u)

            prt('vulns', vulns)

            print('-'*210)
            for future in as_completed(vulns):
                s, u = vulns[future]
                print(f'{u}\t\t{s}')
                try:
                    self.results.append(future.result())
                except Exception as e:
                    print(f'{u},{s} generated an exception: {e}' )
